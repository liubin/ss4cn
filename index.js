var express = require("express");
var app = express();
var ejs = require('ejs');
// var bodyParser = require('body-parser')
var fs = require('fs');
var request = require('request');
var PDFDocument = require('pdfkit');
var cheerio = require('cheerio');
var async = require('async');

var myHttpGetter = require('./MyHttpGetter.js');

app.set('views', __dirname + '/views');
app.engine('.html', ejs.__express);
app.set('view engine', 'html');

app.use(express.static(__dirname + '/public'));

app.use(function(err, req, res, next){
  console.error(err.stack);
  res.send(500, 'hehe!');
});

// app.use(bodyParser.urlencoded())
// app.use(bodyParser.json())

var pdfPath = __dirname + '/public/slides/';

// delete pdf that exists for one period
var cronDelete = function(){
  fs.readdir(pdfPath, function(err, files){
    if(err) return;

    async.eachSeries(files, function(file, next) {

      if(file == '.gitkeep') {
        console.log('gitkeep');
        next();
        return;
      }
      // full path for the file
      var fp = pdfPath + file;
      var fstat = fs.statSync(fp);
      var accessTime = new Date(fstat.atime).getTime();

      var now = new Date().getTime();

      // TODO: make it a const
      var maxAge = 7 * 24 * 60 * 60 * 1000;

      var age = now - accessTime;

      if(age > maxAge){
        console.log('Age: ' + age + '; clear file: ' + file);
        fs.unlinkSync(fp, function(err){
          if(err){
            console.log('ERROR: delete file: ' + file);
          }
        });

      }else{
        console.log('file cache not expired: ' + file);
      }

      next();
    });
  });
};


app.get('/test', function(req, res) {
  cronDelete();
  res.send('OK');
  res.end();
});

// get pages array
var getSlide = function(content){
  $ = cheerio.load(content);
  var pages = [];
  $(content).find("div.slide_container div.slide").each(function(i, page){
    var pageNo = $(page).attr('data-index');
    var imgEle = $($(page).find('img.slide_image')[0]);
    var images = {"normal": imgEle.attr('data-normal'), "full": imgEle.attr('data-full')};
    var page = {"no": pageNo, "images": images};
    // console.log(page);
    pages.push(page);
  });

  var title = $("title").text();

  return {pages: pages, title: title};
};

app.get('/', function(req, res){
  res.render('index');
});

app.get('/:user/:presentation', function(req, res) {
  url = "http://www.slideshare.net/" + req.params.user
                                      + "/" + req.params.presentation;

  path = "/" + req.params.user + "/" + req.params.presentation;
  myHttpGetter.get(url, function(content, status){

    var slide = getSlide(content);
    var pages = slide.pages;

    var title = slide.title

    doc = new PDFDocument
    res.render('preview', {
      title: title,
      path: path,
      pages: JSON.stringify(pages)
    });
  });


});

// title: slide title, if downloaded as file, should use it
// otherwise(openInBrowser), ignore it
// localFileName: localFileName if use download method(not openInBrowser)
var download = function(title, pages, res, localFileName){

    // TODO: should run as a cron job
    cronDelete();

    var openInBrowser = false;

    // local static file where to save.
    var file = pdfPath + localFileName + '.pdf';

    if(openInBrowser == false){
      if(fs.existsSync(file)){
        console.log('cache got, send it to client ...');
        res.download(file, title + '.pdf');
        return;
      }
    }

    var doc = new PDFDocument({layout: 'landscape'});
    doc.info = {Title: title, Author: 'ourcolorfuldays.com'};

    // Stream for the `file`
    var out = null;
    if(openInBrowser == true){
      doc.pipe(res)
    } else {
      console.log('save file to ' + file);
      doc.pipe(out = fs.createWriteStream(file));
    }

    doc.text('generated by http://ss.ourcolorfuldays.com', 5, 10);

    var request2 = require('request').defaults({ encoding: null });

    var current = 0;

    async.eachSeries(pages, function(page, next) {
      var url = page.images.full;
      console.log("async.run: " + url)
      request2(url, function(err, response, buffer) {
        console.log('download ok: ' + url);
        current++;
        // don't add new page when process the first slide page
        if(current > 1) doc.addPage();
        doc.image(buffer, 33, 34, {fit: [728, 546]});
        next();
      });
    }, function(err) {
      // all done
      if(err != undefined){
        console.log("ERROR: " + err);
        return;
      }
      console.log('doc.end');
      doc.end();
      if(openInBrowser == false){
        out.on('finish', function(){
          console.log('write local pdf file finished');
          res.download(file, title + '.pdf', function(err){
            if(err){
              console.log('send file to client error: ' + err);
            }
          });
        });
      }
    });
};

app.get('/:user/:presentation/download', function(req, res) {
  url = "http://www.slideshare.net/" + req.params.user
                                      + "/" + req.params.presentation;

  myHttpGetter.get(url, function(content, status){
    console.log("status:= " + status);

    var slide = getSlide(content);
    var pages = slide.pages;
    var title = slide.title;

    download(title, pages, res,
        req.params.user + '-' + req.params.presentation);

  });

});

var program = require('commander');

program
  .version('0.0.1')
  .option('-p, --port <n>', 'Listening port', parseInt).parse(process.argv);

// get listen port from command line
var port = program.port == undefined ? 5000: program.port;

app.listen(port, function() {
  console.log("Listening on " + port);
});

